// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// myContTable
IntegerMatrix myContTable(IntegerVector& a, IntegerVector& b, int minim_mb1, int minim_mb2);
RcppExport SEXP _ClustAssess_myContTable(SEXP aSEXP, SEXP bSEXP, SEXP minim_mb1SEXP, SEXP minim_mb2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type minim_mb1(minim_mb1SEXP);
    Rcpp::traits::input_parameter< int >::type minim_mb2(minim_mb2SEXP);
    rcpp_result_gen = Rcpp::wrap(myContTable(a, b, minim_mb1, minim_mb2));
    return rcpp_result_gen;
END_RCPP
}
// disjointECS
NumericVector disjointECS(IntegerVector mb1, IntegerVector mb2);
RcppExport SEXP _ClustAssess_disjointECS(SEXP mb1SEXP, SEXP mb2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type mb1(mb1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mb2(mb2SEXP);
    rcpp_result_gen = Rcpp::wrap(disjointECS(mb1, mb2));
    return rcpp_result_gen;
END_RCPP
}
// calculate_pac_cpp
double calculate_pac_cpp(IntegerMatrix indicator, NumericMatrix connectivity, double lower_lim, double upper_lim);
RcppExport SEXP _ClustAssess_calculate_pac_cpp(SEXP indicatorSEXP, SEXP connectivitySEXP, SEXP lower_limSEXP, SEXP upper_limSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type indicator(indicatorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type connectivity(connectivitySEXP);
    Rcpp::traits::input_parameter< double >::type lower_lim(lower_limSEXP);
    Rcpp::traits::input_parameter< double >::type upper_lim(upper_limSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_pac_cpp(indicator, connectivity, lower_lim, upper_lim));
    return rcpp_result_gen;
END_RCPP
}
// filterNNmatrix
List filterNNmatrix(Eigen::SparseMatrix<double> oldNN, Eigen::MatrixXd nnRanked, int oldK, int newK, double prune);
RcppExport SEXP _ClustAssess_filterNNmatrix(SEXP oldNNSEXP, SEXP nnRankedSEXP, SEXP oldKSEXP, SEXP newKSEXP, SEXP pruneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type oldNN(oldNNSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type nnRanked(nnRankedSEXP);
    Rcpp::traits::input_parameter< int >::type oldK(oldKSEXP);
    Rcpp::traits::input_parameter< int >::type newK(newKSEXP);
    Rcpp::traits::input_parameter< double >::type prune(pruneSEXP);
    rcpp_result_gen = Rcpp::wrap(filterNNmatrix(oldNN, nnRanked, oldK, newK, prune));
    return rcpp_result_gen;
END_RCPP
}
// pruneSNN
Eigen::SparseMatrix<double> pruneSNN(Eigen::SparseMatrix<double> snnMatrix, double prune);
RcppExport SEXP _ClustAssess_pruneSNN(SEXP snnMatrixSEXP, SEXP pruneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type snnMatrix(snnMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type prune(pruneSEXP);
    rcpp_result_gen = Rcpp::wrap(pruneSNN(snnMatrix, prune));
    return rcpp_result_gen;
END_RCPP
}
// computeSNN
Eigen::SparseMatrix<double> computeSNN(Eigen::SparseMatrix<double>& nnMatrix, int k, double prune);
RcppExport SEXP _ClustAssess_computeSNN(SEXP nnMatrixSEXP, SEXP kSEXP, SEXP pruneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type nnMatrix(nnMatrixSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type prune(pruneSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSNN(nnMatrix, k, prune));
    return rcpp_result_gen;
END_RCPP
}
// getNNmatrix
List getNNmatrix(Eigen::MatrixXd nnRanked, int k, int start, double prune);
RcppExport SEXP _ClustAssess_getNNmatrix(SEXP nnRankedSEXP, SEXP kSEXP, SEXP startSEXP, SEXP pruneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type nnRanked(nnRankedSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type prune(pruneSEXP);
    rcpp_result_gen = Rcpp::wrap(getNNmatrix(nnRanked, k, start, prune));
    return rcpp_result_gen;
END_RCPP
}
// update_connectivity_cpp
NumericMatrix update_connectivity_cpp(NumericMatrix connectivity, IntegerVector sampling_indices, IntegerVector cluster_assignments);
RcppExport SEXP _ClustAssess_update_connectivity_cpp(SEXP connectivitySEXP, SEXP sampling_indicesSEXP, SEXP cluster_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type connectivity(connectivitySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sampling_indices(sampling_indicesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cluster_assignments(cluster_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_connectivity_cpp(connectivity, sampling_indices, cluster_assignments));
    return rcpp_result_gen;
END_RCPP
}
// wilcox_test
NumericVector wilcox_test(IntegerMatrix rank_values, int n1, int max_rank);
RcppExport SEXP _ClustAssess_wilcox_test(SEXP rank_valuesSEXP, SEXP n1SEXP, SEXP max_rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type rank_values(rank_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type max_rank(max_rankSEXP);
    rcpp_result_gen = Rcpp::wrap(wilcox_test(rank_values, n1, max_rank));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ClustAssess_myContTable", (DL_FUNC) &_ClustAssess_myContTable, 4},
    {"_ClustAssess_disjointECS", (DL_FUNC) &_ClustAssess_disjointECS, 2},
    {"_ClustAssess_calculate_pac_cpp", (DL_FUNC) &_ClustAssess_calculate_pac_cpp, 4},
    {"_ClustAssess_filterNNmatrix", (DL_FUNC) &_ClustAssess_filterNNmatrix, 5},
    {"_ClustAssess_pruneSNN", (DL_FUNC) &_ClustAssess_pruneSNN, 2},
    {"_ClustAssess_computeSNN", (DL_FUNC) &_ClustAssess_computeSNN, 3},
    {"_ClustAssess_getNNmatrix", (DL_FUNC) &_ClustAssess_getNNmatrix, 4},
    {"_ClustAssess_update_connectivity_cpp", (DL_FUNC) &_ClustAssess_update_connectivity_cpp, 3},
    {"_ClustAssess_wilcox_test", (DL_FUNC) &_ClustAssess_wilcox_test, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ClustAssess(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
